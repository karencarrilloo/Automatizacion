import { By, until } from 'selenium-webdriver';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import loginPage from './login.page.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

export default class GestionClientesServiciosPage {
  constructor(driver) {
    this.driver = driver;
  }

  async ejecutarGestionClientesServicios() {
    const driver = this.driver;

    try {
      // === Paso 1: Clic en m√≥dulo eCenter ===
      const eCenterBtn = await driver.wait(
        until.elementLocated(By.xpath("//div[@id='118' and contains(@class, 'item-module')]")),
        10000
      );
      await driver.executeScript("arguments[0].click();", eCenterBtn);
      await driver.sleep(1000);

      // === Paso 2: Scroll en el contenedor de aplicaciones ===
      const scrollContainer = await driver.wait(
        until.elementLocated(By.css('.container-applications')),
        10000
      );
      await driver.executeScript(
        "arguments[0].scrollTop = arguments[0].scrollHeight;",
        scrollContainer
      );
      await driver.sleep(1000);

      // === Paso 3: Clic en "Gesti√≥n sobre clientes y servicios domiciliarios" ===
      const gestionClientesBtn = await driver.wait(
        until.elementLocated(By.xpath("//div[contains(@class,'legend-application') and contains(text(),'Gesti√≥n sobre clientes y servicios domiciliarios')]")),
        10000
      );
      await driver.executeScript("arguments[0].scrollIntoView({behavior:'smooth', block:'center'});", gestionClientesBtn);
      await driver.wait(until.elementIsVisible(gestionClientesBtn), 10000);
      await driver.wait(until.elementIsEnabled(gestionClientesBtn), 10000);
      await driver.sleep(1000);
      await driver.executeScript("arguments[0].click();", gestionClientesBtn);
      await driver.sleep(5000);


      // paso 4 === Seleccionar cliente RESIDENCIAL ACTIVO ===
      try {
        // Buscar din√°micamente el tbody de la tabla (sin ID fijo)
        const cuerpoTabla = await driver.wait(
          until.elementLocated(By.xpath('//div[contains(@id,"grid-table-crud-grid") and contains(@id,"CustomerManager")]//table/tbody')),
          15000
        );

        // Reintento: esperar hasta encontrar al menos una fila v√°lida
        let filaSeleccionada = null;
        let intentos = 0;
        while (!filaSeleccionada && intentos < 5) {
          intentos++;
          console.log(`üîé Intento ${intentos}: buscando cliente RESIDENCIAL ACTIVO...`);

          const filas = await cuerpoTabla.findElements(By.xpath('./tr'));
          if (filas.length === 0) {
            console.log("‚ö†Ô∏è No hay filas en la tabla, esperando...");
            await driver.sleep(2000);
            continue;
          }

          for (const fila of filas) {
            const celdas = await fila.findElements(By.css('td'));
            if (celdas.length < 15) continue; // Evitar errores si la fila no tiene todas las columnas

            const estadoCliente = (await celdas[9].getText()).trim().toUpperCase();   // Col 9 = Estado
            const tipoCliente = (await celdas[14].getText()).trim().toUpperCase();    // Col 14 = Tipo Cliente

            console.log(`   ‚ûù Estado=${estadoCliente}, TipoCliente=${tipoCliente}`);

            if (estadoCliente.includes("ACTIVO") && tipoCliente.includes("RESIDENCIAL")) {
              filaSeleccionada = fila;
              this.estadoClienteSeleccionado = estadoCliente;
              this.tipoClienteSeleccionado = tipoCliente;
              console.log(`‚úÖ Cliente v√°lido encontrado: Estado=${estadoCliente}, TipoCliente=${tipoCliente}`);
              break;
            }
          }

          if (!filaSeleccionada) {
            console.log("‚ö†Ô∏è No se encontr√≥ cliente v√°lido, reintentando...");
            await driver.sleep(2000);
          }
        }

        if (!filaSeleccionada) {
          throw new Error("‚ùå No se encontr√≥ ning√∫n cliente RESIDENCIAL ACTIVO despu√©s de varios intentos.");
        }

        // Seleccionar fila encontrada
        await driver.wait(until.elementIsVisible(filaSeleccionada), 5000);
        await driver.executeScript("arguments[0].scrollIntoView({block: 'center'});", filaSeleccionada);
        await driver.sleep(300);
        await filaSeleccionada.click();
        await driver.sleep(1000);

        console.log("‚úÖ Cliente RESIDENCIAL ACTIVO seleccionado correctamente.");
      } catch (error) {
        throw new Error(`‚ùå Error en paso 4: ${error.message}`);
      }



      // === Paso 5: Seleccionar bot√≥n Opciones ===
      try {
        const btnOpciones = await driver.wait(
          until.elementLocated(By.xpath('//*[@id="btn-options"]')),
          10000
        );

        await driver.wait(until.elementIsVisible(btnOpciones), 5000);
        await driver.executeScript("arguments[0].scrollIntoView({block: 'center'});", btnOpciones);
        await driver.sleep(300);

        await driver.executeScript("arguments[0].click();", btnOpciones);
        await driver.sleep(1000);

        console.log("‚úÖ Paso 5: Bot√≥n Opciones seleccionado correctamente.");
      } catch (error) {
        throw new Error(`‚ùå Paso 5: (clic en bot√≥n Opciones): ${error.message}`);
      }

      // === Paso 6: Seleccionar opci√≥n "Ver informaci√≥n t√©cnica asociada" ===
      try {
        // Esperar a que se despliegue el men√∫ UL de opciones
        const menuOpciones = await driver.wait(
          until.elementLocated(By.xpath('//*[@id="container-general-crud"]/div[4]/div[2]/div[1]/div/div/div/ul')),
          10000
        );

        await driver.wait(until.elementIsVisible(menuOpciones), 5000);

        // Buscar el LI con id=1090 dentro del men√∫
        const opcionVerInfo = await driver.wait(
          until.elementLocated(By.xpath('//*[@id="1090"]')),
          10000
        );

        await driver.executeScript("arguments[0].scrollIntoView({block: 'center'});", opcionVerInfo);
        await driver.sleep(300);

        await driver.executeScript("arguments[0].click();", opcionVerInfo);
        await driver.sleep(3000); // espera que cargue la vista

        console.log("‚úÖ Paso 6: Opci√≥n 'Ver informaci√≥n t√©cnica asociada' seleccionada.");
      } catch (error) {
        throw new Error(`‚ùå Paso 6: (clic en opci√≥n Ver informaci√≥n t√©cnica asociada): ${error.message}`);
      }

      // === Paso 7: Cerrar el modal de informaci√≥n t√©cnica ===
      try {
        const btnCerrarModal = await driver.wait(
          until.elementLocated(By.xpath('//*[@id="widget-button-cancel-confirm-selected"]/div')),
          10000
        );

        await driver.wait(until.elementIsVisible(btnCerrarModal), 5000);
        await driver.executeScript("arguments[0].scrollIntoView({block: 'center'});", btnCerrarModal);
        await driver.sleep(300);

        await driver.executeScript("arguments[0].click();", btnCerrarModal);
        await driver.sleep(2000); // Espera a que el modal desaparezca

        console.log("‚úÖ Paso 7: Modal cerrado correctamente.");
      } catch (error) {
        throw new Error(`‚ùå Paso 7: (cerrar modal): ${error.message}`);
      }

      // === Paso 8: Seleccionar bot√≥n Opciones ===
      try {
        const btnOpciones = await driver.wait(
          until.elementLocated(By.xpath('//*[@id="btn-options"]')),
          10000
        );

        await driver.wait(until.elementIsVisible(btnOpciones), 5000);
        await driver.executeScript("arguments[0].scrollIntoView({block: 'center'});", btnOpciones);
        await driver.sleep(300);

        await driver.executeScript("arguments[0].click();", btnOpciones);
        await driver.sleep(1000);

        console.log("‚úÖ Paso 8: Bot√≥n Opciones seleccionado correctamente.");
      } catch (error) {
        throw new Error(`‚ùå Paso 8: (clic en bot√≥n Opciones): ${error.message}`);
      }


      // // === Paso 9: Seleccionar opci√≥n "Reconfiguraci√≥n" ===
      // try {
      //   // Esperar que el men√∫ UL est√© disponible nuevamente
      //   const menuOpciones = await driver.wait(
      //     until.elementLocated(By.xpath('//*[@id="container-general-crud"]/div[4]/div[2]/div[1]/div/div/div/ul')),
      //     10000
      //   );

      //   await driver.wait(until.elementIsVisible(menuOpciones), 5000);

      //   // Buscar el LI con id=1089 dentro del men√∫
      //   const opcionReconfig = await driver.wait(
      //     until.elementLocated(By.xpath('//*[@id="1089"]')),
      //     10000
      //   );

      //   await driver.executeScript("arguments[0].scrollIntoView({block: 'center'});", opcionReconfig);
      //   await driver.sleep(300);

      //   await driver.executeScript("arguments[0].click();", opcionReconfig);
      //   await driver.sleep(2000); // Espera que cargue la vista o modal de reconfiguraci√≥n

      //   console.log("‚úÖ Paso 9: Opci√≥n 'Reconfiguraci√≥n' seleccionada correctamente.");
      // } catch (error) {
      //   throw new Error(`‚ùå Paso 9: (clic en opci√≥n Reconfiguraci√≥n): ${error.message}`);
      // }

      // // === Paso 10: Clic en bot√≥n "Reconfigurar" ===
      // try {
      //   const btnReconfigurar = await driver.wait(
      //     until.elementLocated(By.xpath('//*[@id="widget-button-btn-reconfig"]/div')),
      //     10000
      //   );

      //   await driver.wait(until.elementIsVisible(btnReconfigurar), 5000);
      //   await driver.executeScript("arguments[0].scrollIntoView({block: 'center'});", btnReconfigurar);
      //   await driver.sleep(300);

      //   await driver.executeScript("arguments[0].click();", btnReconfigurar);
      //   await driver.sleep(2000); // Espera que se procese la acci√≥n

      //   console.log("‚úÖ Paso 10: 'Reconfigurar' presionado correctamente.");
      // } catch (error) {
      //   throw new Error(`‚ùå Paso 10: (clic en bot√≥n Reconfigurar): ${error.message}`);
      // }

      // // === Paso 11: Confirmar con "S√≠" en el modal ===
      // try {
      //   const btnConfirmarSi = await driver.wait(
      //     until.elementLocated(By.xpath('//*[@id="widget-button-btConfirmYes"]/div')),
      //     10000
      //   );

      //   await driver.wait(until.elementIsVisible(btnConfirmarSi), 5000);
      //   await driver.executeScript("arguments[0].scrollIntoView({block: 'center'});", btnConfirmarSi);
      //   await driver.sleep(300);

      //   await driver.executeScript("arguments[0].click();", btnConfirmarSi);
      //   await driver.sleep(3000); // espera a que la acci√≥n de reconfiguraci√≥n inicie

      //   console.log("‚úÖ CP_GESCLI_001: Confirmaci√≥n 'S√≠' en el modal ejecutada correctamente.");
      // } catch (error) {
      //   throw new Error(`‚ùå Paso 11: (clic en 'S√≠' del modal de confirmaci√≥n): ${error.message}`);
      // }

      // // === Paso 12: Manejo de ejecuci√≥n de reconfiguraci√≥n (√©xito o fallo) === 
      // let reconfigExitosa = false; // ‚úÖ Declarar aqu√≠ para que exista en todo el bloque

      // try {
      //   const btnSiguienteXpath = '//*[@id="widget-button-btn-next"]/div';
      //   const btnCerrarModalErrorXpath = '//div[starts-with(@id,"widget-dialog-open-dialog") and contains(@id,"CustomerManager")]//button';
      //   const checkOkXpath = '//*[@id="widget-dialog-open-dialog-602818-5522-CustomerManager"]//span[contains(@class,"glyphicon-ok")]';

      //   console.log("‚è≥ Esperando que se complete la reconfiguraci√≥n...");

      //   // === Etapa 1: Esperar a que aparezcan todos los checks ===
      //   await driver.wait(async () => {
      //     const checks = await driver.findElements(By.xpath(checkOkXpath));
      //     console.log(`üìå Checks encontrados: ${checks.length}`);
      //     return checks.length >= 5; // Ajusta seg√∫n n√∫mero esperado
      //   }, 600000, "‚ùå Los checks no se completaron en el tiempo esperado (10 min).");

      //   console.log("‚úÖ Todos los pasos de reconfiguraci√≥n completados.");

      //   // === Etapa 2: Presionar bot√≥n Siguiente ===
      //   const btnSiguiente = await driver.wait(
      //     until.elementLocated(By.xpath(btnSiguienteXpath)),
      //     120000
      //   );
      //   await driver.wait(until.elementIsVisible(btnSiguiente), 20000);
      //   await driver.wait(until.elementIsEnabled(btnSiguiente), 20000);
      //   await driver.executeScript("arguments[0].click();", btnSiguiente);
      //   console.log("‚úÖ Reconfiguraci√≥n finalizada: bot√≥n 'Siguiente' presionado.");

      //   reconfigExitosa = true;

      // } catch (e) {
      //   console.log("‚ÑπÔ∏è No se detect√≥ √©xito, verificando modal de error...");
      //   try {
      //     const btnCerrarModalError = await driver.wait(
      //       until.elementLocated(By.xpath(btnCerrarModalErrorXpath)),
      //       15000
      //     );
      //     await driver.wait(until.elementIsVisible(btnCerrarModalError), 5000);
      //     await driver.executeScript("arguments[0].click();", btnCerrarModalError);
      //     await driver.sleep(2000);
      //     console.log("‚ö†Ô∏è Reconfiguraci√≥n fallida: modal cerrado correctamente.");
      //   } catch {
      //     console.log("‚ùå No apareci√≥ modal de error durante la reconfiguraci√≥n.");
      //   }
      //   reconfigExitosa = false;
      // }

      // // ‚úÖ Siempre asignamos el resultado al estado global
      // this.reconfiguracionExitosa = reconfigExitosa;

      // await driver.sleep(3000);


      // // === Paso 13: Reutilizar datos WiFi ===
      // try {
      //   const btnConfigurarXpath = '//*[@id="widget-button-btn-config-wifi-data"]/div';
      //   const progressXpath = '//*[@id="widget-dialog-open-dialog-602818-5522-CustomerManager"]//div[contains(@class,"progress-bar")]';

      //   // 1. Esperar que el bot√≥n "Configurar" sea visible
      //   const btnConfigurar = await driver.wait(
      //     until.elementLocated(By.xpath(btnConfigurarXpath)),
      //     30000 // puede tardar en aparecer
      //   );
      //   await driver.wait(until.elementIsVisible(btnConfigurar), 10000);
      //   await driver.sleep(2000);

      //   // 2. Dar clic en "Configurar"
      //   await driver.executeScript("arguments[0].click();", btnConfigurar);
      //   console.log("‚úÖ Reutilizar datos WiFi: bot√≥n 'Configurar' presionado correctamente.");

      //   // 3. Esperar a que aparezca el progress din√°micamente
      //   console.log("‚è≥ Esperando inicio del proceso de configuraci√≥n WiFi...");
      //   let progress;
      //   try {
      //     progress = await driver.wait(
      //       until.elementLocated(By.xpath(progressXpath)),
      //       60000 // darle hasta 1 min para iniciar
      //     );
      //     await driver.wait(until.elementIsVisible(progress), 10000);
      //     console.log("‚úÖ Progress de WiFi detectado, proceso en curso...");
      //   } catch {
      //     console.log("‚ö†Ô∏è No apareci√≥ progress de WiFi en el tiempo esperado, continuando...");
      //   }

      //   // 4. Esperar a que desaparezca (fin del proceso)
      //   if (progress) {
      //     console.log("‚è≥ Esperando que finalice el progress...");
      //     await driver.wait(until.stalenessOf(progress), 300000); // hasta 5 minutos
      //     console.log("‚úÖ Proceso de configuraci√≥n WiFi finalizado correctamente.");
      //   }

      // } catch (err) {
      //   throw new Error(`‚ùå Error en paso Reutilizar datos WiFi: ${err.message}`);
      // }


      // // === Paso 14: Seleccionar bot√≥n Opciones ===
      // try {
      //   const btnOpciones = await driver.wait(
      //     until.elementLocated(By.xpath('//*[@id="btn-options"]')),
      //     10000
      //   );

      //   await driver.wait(until.elementIsVisible(btnOpciones), 5000);
      //   await driver.executeScript("arguments[0].scrollIntoView({block: 'center'});", btnOpciones);
      //   await driver.sleep(300);

      //   await driver.executeScript("arguments[0].click();", btnOpciones);
      //   await driver.sleep(1000);

      //   console.log("‚úÖ Paso 8: Bot√≥n Opciones seleccionado correctamente.");
      // } catch (error) {
      //   throw new Error(`‚ùå Paso 8: (clic en bot√≥n Opciones): ${error.message}`);
      // }

      // === Paso 15: Seleccionar opci√≥n "Ver dispositivos" ===
      try {
        // Esperar a que se despliegue el men√∫ UL de opciones
        const menuOpciones = await driver.wait(
          until.elementLocated(By.xpath('//*[@id="container-general-crud"]/div[4]/div[2]/div[1]/div/div/div/ul')),
          10000
        );
        await driver.wait(until.elementIsVisible(menuOpciones), 5000);

        // Buscar el LI con id=1088 dentro del men√∫
        const opcionVerDispositivos = await driver.wait(
          until.elementLocated(By.xpath('//*[@id="1088"]')),
          10000
        );

        await driver.executeScript("arguments[0].scrollIntoView({block: 'center'});", opcionVerDispositivos);
        await driver.sleep(300);

        await driver.executeScript("arguments[0].click();", opcionVerDispositivos);
        await driver.sleep(3000); // espera que cargue la vista o modal

        console.log("‚úÖ Paso 15: Opci√≥n 'Ver dispositivos' seleccionada.");
      } catch (error) {
        throw new Error(`‚ùå Paso 15: (clic en opci√≥n Ver dispositivos): ${error.message}`);
      }


      // === Paso 16: Cerrar el modal "Ver dispositivos" === 
      try {
        const btnCerrarModalXpath = '//*[@id="widget-dialog-open-dialog-602818-5522-CustomerManager"]/div/div/div[1]/button';

        // Esperar que aparezca el bot√≥n de cerrar
        const btnCerrarModal = await driver.wait(
          until.elementLocated(By.xpath(btnCerrarModalXpath)),
          10000
        );

        // Esperar que sea visible
        await driver.wait(until.elementIsVisible(btnCerrarModal), 5000);

        // Hacer scroll hasta el bot√≥n
        await driver.executeScript("arguments[0].scrollIntoView({block: 'center'});", btnCerrarModal);
        await driver.sleep(300);

        // Clic forzado con JS (evita el click intercepted)
        await driver.executeScript("arguments[0].click();", btnCerrarModal);

        // Esperar a que el modal desaparezca
        await driver.sleep(2000);

        console.log("‚úÖ Modal 'Ver dispositivos' cerrado correctamente.");
      } catch (error) {
        throw new Error(`‚ùå Error al cerrar el modal 'Ver dispositivos': ${error.message}`);
      }


      // === Paso 17: Seleccionar bot√≥n Opciones ===
      try {
        const btnOpciones = await driver.wait(
          until.elementLocated(By.xpath('//*[@id="btn-options"]')),
          10000
        );

        await driver.wait(until.elementIsVisible(btnOpciones), 5000);
        await driver.executeScript("arguments[0].scrollIntoView({block: 'center'});", btnOpciones);
        await driver.sleep(300);

        await driver.executeScript("arguments[0].click();", btnOpciones);
        await driver.sleep(1000);

        console.log("‚úÖ Paso 8: Bot√≥n Opciones seleccionado correctamente.");
      } catch (error) {
        throw new Error(`‚ùå Paso 8: (clic en bot√≥n Opciones): ${error.message}`);
      }

      // === Paso 18: Seleccionar opci√≥n "Ver documentos" ===
      try {
        // Esperar a que se despliegue el men√∫ UL de opciones
        const menuOpciones = await driver.wait(
          until.elementLocated(By.xpath('//*[@id="container-general-crud"]/div[4]/div[2]/div[1]/div/div/div/ul')),
          10000
        );
        await driver.wait(until.elementIsVisible(menuOpciones), 5000);

        // Buscar el LI con id=1080 dentro del men√∫
        const opcionVerDocumentos = await driver.wait(
          until.elementLocated(By.xpath('//*[@id="1080"]')),
          10000
        );

        await driver.executeScript("arguments[0].scrollIntoView({block: 'center'});", opcionVerDocumentos);
        await driver.sleep(300);

        await driver.executeScript("arguments[0].click();", opcionVerDocumentos);
        await driver.sleep(3000); // espera que cargue la vista o modal

        console.log("‚úÖ Paso 16: Opci√≥n 'Ver documentos' seleccionada.");
      } catch (error) {
        throw new Error(`‚ùå Paso 16: (clic en opci√≥n Ver documentos): ${error.message}`);
      }

      // // === Paso 19: Enviar Acta de instalaci√≥n al correo ===
      // try {
      //   const filaActaXpath = '//*[@id="68937ad0eccd6c733ecd26ef"]'; // Fila Acta de Instalaci√≥n
      //   const btnEnviarCorreoXpath = `${filaActaXpath}/div[3]`; // Bot√≥n dentro de la columna OPCIONES

      //   // 1. Esperar a que aparezca la fila del acta
      //   const filaActa = await driver.wait(
      //     until.elementLocated(By.xpath(filaActaXpath)),
      //     20000
      //   );
      //   await driver.wait(until.elementIsVisible(filaActa), 5000);

      //   // 2. Esperar y dar clic en el bot√≥n de enviar al correo
      //   const btnEnviarCorreo = await driver.wait(
      //     until.elementLocated(By.xpath(btnEnviarCorreoXpath)),
      //     10000
      //   );
      //   await driver.wait(until.elementIsVisible(btnEnviarCorreo), 5000);

      //   await driver.executeScript("arguments[0].scrollIntoView({block: 'center'});", btnEnviarCorreo);
      //   await driver.sleep(500);

      //   await driver.executeScript("arguments[0].click();", btnEnviarCorreo);
      //   await driver.sleep(3000); // espera para simular env√≠o

      //   console.log("‚úÖ Paso 17: Acta enviada al correo correctamente.");
      // } catch (error) {
      //   throw new Error(`‚ùå Paso 17: Error al enviar el acta al correo: ${error.message}`);
      // }


      // // === Paso 20: Ver documento del Acta de instalaci√≥n ===
      // try {
      //   const filaActaXpath = '//*[@id="68937ad0eccd6c733ecd26ef"]'; // Fila Acta de Instalaci√≥n
      //   const btnVerDocumentoXpath = `${filaActaXpath}/div[4]`; // Bot√≥n Ver documento

      //   // 1. Esperar a que la fila del acta est√© presente
      //   const filaActa = await driver.wait(
      //     until.elementLocated(By.xpath(filaActaXpath)),
      //     20000
      //   );
      //   await driver.wait(until.elementIsVisible(filaActa), 5000);

      //   // 2. Localizar el bot√≥n "Ver documento"
      //   const btnVerDocumento = await driver.wait(
      //     until.elementLocated(By.xpath(btnVerDocumentoXpath)),
      //     10000
      //   );
      //   await driver.wait(until.elementIsVisible(btnVerDocumento), 5000);

      //   // 3. Hacer scroll y clic
      //   await driver.executeScript("arguments[0].scrollIntoView({block: 'center'});", btnVerDocumento);
      //   await driver.sleep(500);

      //   await driver.executeScript("arguments[0].click();", btnVerDocumento);
      //   await driver.sleep(5000); // Espera a que cargue el documento

      //   console.log("‚úÖ Paso 18: Opci√≥n 'Ver documento' seleccionada correctamente.");
      // } catch (error) {
      //   throw new Error(`‚ùå Paso 18: Error al seleccionar la opci√≥n 'Ver documento': ${error.message}`);
      // }

      // // === Paso 21: Cerrar modal de Ver Documento ===
      // try {
      //   const btnCerrarModalDocXpath = '//*[@id="widget-dialog-contract-dialog"]/div/div/div[1]/button';

      //   // 1. Esperar a que aparezca el bot√≥n de cerrar
      //   const btnCerrarModalDoc = await driver.wait(
      //     until.elementLocated(By.xpath(btnCerrarModalDocXpath)),
      //     15000
      //   );
      //   await driver.wait(until.elementIsVisible(btnCerrarModalDoc), 5000);

      //   // 2. Hacer scroll hasta el bot√≥n
      //   await driver.executeScript("arguments[0].scrollIntoView({block: 'center'});", btnCerrarModalDoc);
      //   await driver.sleep(500);

      //   // 3. Dar clic en el bot√≥n de cerrar
      //   await driver.executeScript("arguments[0].click();", btnCerrarModalDoc);
      //   await driver.sleep(2000); // esperar a que el modal se cierre

      //   console.log("‚úÖ Paso 19: Modal de Ver Documento cerrado correctamente.");
      // } catch (error) {
      //   throw new Error(`‚ùå Paso 19: Error al cerrar modal de Ver Documento: ${error.message}`);
      // }


      // // === Paso 22: Descargar documento del Acta de instalaci√≥n ===
      // try {
      //   const filaActaXpath = '//*[@id="68937ad0eccd6c733ecd26ef"]'; // Fila Acta de Instalaci√≥n
      //   const btnDescargarXpath = `${filaActaXpath}/div[5]`; // Bot√≥n Descargar documento

      //   // 1. Esperar a que la fila del acta est√© presente
      //   const filaActa = await driver.wait(
      //     until.elementLocated(By.xpath(filaActaXpath)),
      //     20000
      //   );
      //   await driver.wait(until.elementIsVisible(filaActa), 5000);

      //   // 2. Localizar el bot√≥n "Descargar"
      //   const btnDescargar = await driver.wait(
      //     until.elementLocated(By.xpath(btnDescargarXpath)),
      //     10000
      //   );
      //   await driver.wait(until.elementIsVisible(btnDescargar), 5000);

      //   // 3. Hacer scroll y clic
      //   await driver.executeScript("arguments[0].scrollIntoView({block: 'center'});", btnDescargar);
      //   await driver.sleep(500);

      //   await driver.executeScript("arguments[0].click();", btnDescargar);
      //   await driver.sleep(5000); // Espera a que el navegador inicie la descarga

      //   console.log("‚úÖ Paso 19: Documento descargado correctamente.");
      // } catch (error) {
      //   throw new Error(`‚ùå Paso 19: Error al descargar el documento: ${error.message}`);
      // }

      // // === Paso 23: Enviar documento Contrato al correo ===
      // try {
      //   const filaContratoXpath = '//*[@id="68937687eccd6c733ecd2641"]'; // Fila Contrato
      //   const btnEnviarCorreoContratoXpath = `${filaContratoXpath}/div[3]`; // Bot√≥n Enviar al correo

      //   // 1. Esperar a que la fila del contrato est√© presente
      //   const filaContrato = await driver.wait(
      //     until.elementLocated(By.xpath(filaContratoXpath)),
      //     20000
      //   );
      //   await driver.wait(until.elementIsVisible(filaContrato), 5000);

      //   // 2. Localizar el bot√≥n "Enviar al correo"
      //   const btnEnviarCorreoContrato = await driver.wait(
      //     until.elementLocated(By.xpath(btnEnviarCorreoContratoXpath)),
      //     10000
      //   );
      //   await driver.wait(until.elementIsVisible(btnEnviarCorreoContrato), 5000);

      //   // 3. Hacer scroll y clic
      //   await driver.executeScript("arguments[0].scrollIntoView({block: 'center'});", btnEnviarCorreoContrato);
      //   await driver.sleep(500);

      //   await driver.executeScript("arguments[0].click();", btnEnviarCorreoContrato);
      //   await driver.sleep(4000); // Tiempo para que se procese el env√≠o

      //   console.log("‚úÖ Paso 20: Documento Contrato enviado al correo correctamente.");
      // } catch (error) {
      //   throw new Error(`‚ùå Paso 20: Error al enviar documento Contrato al correo: ${error.message}`);
      // }

      // // === Paso 24: Seleccionar opci√≥n "Ver Documento (Contrato)" ===
      // try {
      //   const opcionVerContratoXpath = '//*[@id="68937687eccd6c733ecd2641"]/div[4]';

      //   // 1. Esperar a que aparezca la opci√≥n de Ver Documento (Contrato)
      //   const opcionVerContrato = await driver.wait(
      //     until.elementLocated(By.xpath(opcionVerContratoXpath)),
      //     15000
      //   );
      //   await driver.wait(until.elementIsVisible(opcionVerContrato), 5000);

      //   // 2. Hacer scroll hasta la opci√≥n
      //   await driver.executeScript("arguments[0].scrollIntoView({block: 'center'});", opcionVerContrato);
      //   await driver.sleep(500);

      //   // 3. Dar clic en la opci√≥n
      //   await driver.executeScript("arguments[0].click();", opcionVerContrato);
      //   await driver.sleep(3000); // esperar a que cargue el modal del contrato

      //   console.log("‚úÖ Paso 20: Opci√≥n 'Ver Documento (Contrato)' seleccionada correctamente.");
      // } catch (error) {
      //   throw new Error(`‚ùå Paso 20: Error al seleccionar 'Ver Documento (Contrato)': ${error.message}`);
      // }

      // // === Paso 25: Cerrar modal "Ver Documento (Contrato)" ===
      // try {
      //   const btnCerrarModalContratoXpath = '//*[@id="widget-dialog-contract-dialog"]/div/div/div[1]/button';

      //   // 1. Esperar a que aparezca el bot√≥n de cerrar
      //   const btnCerrarModalContrato = await driver.wait(
      //     until.elementLocated(By.xpath(btnCerrarModalContratoXpath)),
      //     15000
      //   );
      //   await driver.wait(until.elementIsVisible(btnCerrarModalContrato), 5000);

      //   // 2. Scroll hasta el bot√≥n por seguridad
      //   await driver.executeScript("arguments[0].scrollIntoView({block: 'center'});", btnCerrarModalContrato);
      //   await driver.sleep(300);

      //   // 3. Clic en el bot√≥n cerrar
      //   await driver.executeScript("arguments[0].click();", btnCerrarModalContrato);
      //   await driver.sleep(2000); // espera a que el modal se cierre

      //   console.log("‚úÖ Paso 21: Modal 'Ver Documento (Contrato)' cerrado correctamente.");
      // } catch (error) {
      //   throw new Error(`‚ùå Paso 21: Error al cerrar modal 'Ver Documento (Contrato)': ${error.message}`);
      // }

      // // === Paso 26: Seleccionar opci√≥n "Descargar Documento (Contrato)" ===
      // try {
      //   const opcionDescargarContratoXpath = '//*[@id="68937687eccd6c733ecd2641"]/div[5]';

      //   // 1. Esperar a que aparezca la opci√≥n Descargar Documento (Contrato)
      //   const opcionDescargarContrato = await driver.wait(
      //     until.elementLocated(By.xpath(opcionDescargarContratoXpath)),
      //     15000
      //   );
      //   await driver.wait(until.elementIsVisible(opcionDescargarContrato), 5000);

      //   // 2. Hacer scroll hasta la opci√≥n
      //   await driver.executeScript("arguments[0].scrollIntoView({block: 'center'});", opcionDescargarContrato);
      //   await driver.sleep(500);

      //   // 3. Dar clic en la opci√≥n
      //   await driver.executeScript("arguments[0].click();", opcionDescargarContrato);
      //   await driver.sleep(4000); // espera extra porque puede tardar la descarga

      //   console.log("‚úÖ Paso 21: Opci√≥n 'Descargar Documento (Contrato)' ejecutada correctamente.");
      // } catch (error) {
      //   throw new Error(`‚ùå Paso 21: Error al seleccionar 'Descargar Documento (Contrato)': ${error.message}`);
      // }


      // === Paso 27: Cerrar modal "Ver Documentos" ===
      try {
        const btnCerrarModalDocsXpath = '//*[@id="widget-dialog-open-dialog-602818-5522-CustomerManager"]/div/div/div[1]/button';

        // 1. Esperar a que aparezca el bot√≥n de cerrar
        const btnCerrarModalDocs = await driver.wait(
          until.elementLocated(By.xpath(btnCerrarModalDocsXpath)),
          15000
        );
        await driver.wait(until.elementIsVisible(btnCerrarModalDocs), 5000);

        // 2. Scroll hasta el bot√≥n (por seguridad)
        await driver.executeScript("arguments[0].scrollIntoView({block: 'center'});", btnCerrarModalDocs);
        await driver.sleep(300);

        // 3. Hacer clic en el bot√≥n cerrar
        await driver.executeScript("arguments[0].click();", btnCerrarModalDocs);
        await driver.sleep(2000); // esperar a que el modal desaparezca

        console.log("‚úÖ Paso 23: Modal 'Ver Documentos' cerrado correctamente.");
      } catch (error) {
        throw new Error(`‚ùå Paso 23: Error al cerrar modal 'Ver Documentos': ${error.message}`);
      }

      // === Paso 28: Seleccionar opci√≥n "Detalle del proceso" ===
      try {
        const btnOpcionesXpath = '//*[@id="btn-options"]';
        const ulOpcionesXpath = '//*[@id="container-general-crud"]/div[4]/div[2]/div[1]/div/div/div/ul';
        const liDetalleProceso = '//*[@id="1084"]';
        const modalGenericoXpath = '//div[starts-with(@id,"widget-dialog") and contains(@id,"CustomerManager")]';

        // 1) Abrir el men√∫ Opciones
        const btnOpciones = await driver.wait(
          until.elementLocated(By.xpath(btnOpcionesXpath)),
          20000
        );
        await driver.wait(until.elementIsVisible(btnOpciones), 6000);
        await driver.executeScript("arguments[0].click();", btnOpciones);

        // 2) Esperar el UL del men√∫ y la opci√≥n "Detalle del proceso"
        const menuOpciones = await driver.wait(
          until.elementLocated(By.xpath(ulOpcionesXpath)),
          10000
        );
        await driver.wait(until.elementIsVisible(menuOpciones), 5000);

        // Buscar el LI dentro del UL para evitar colisiones con otros men√∫s
        const opcionDetalle = await menuOpciones.findElement(By.xpath('.//li[@id="1084"]'));
        await driver.executeScript("arguments[0].scrollIntoView({block:'center'});", opcionDetalle);
        await driver.sleep(250);
        await driver.executeScript("arguments[0].click();", opcionDetalle);

        // 3) (Opcional) Confirmar que se abri√≥ un modal
        await driver.wait(
          until.elementLocated(By.xpath(modalGenericoXpath)),
          15000
        );
        await driver.sleep(5000);

        console.log("‚úÖ Opci√≥n 'Detalle del proceso' abierta correctamente.");
      } catch (error) {
        throw new Error(`‚ùå Error al abrir 'Detalle del proceso': ${error.message}`);
      }

      // === Paso 29: Cerrar el modal de Detalle del proceso ===
      try {
        const btnCerrarDetalleProcesoXpath = '//*[@id="widget-dialog-open-dialog-602818-5522-CustomerManager"]/div/div/div[1]/button';

        const btnCerrarDetalleProceso = await driver.wait(
          until.elementLocated(By.xpath(btnCerrarDetalleProcesoXpath)),
          10000
        );

        await driver.wait(until.elementIsVisible(btnCerrarDetalleProceso), 5000);
        await driver.executeScript("arguments[0].scrollIntoView({block: 'center'});", btnCerrarDetalleProceso);
        await driver.sleep(300);

        await driver.executeScript("arguments[0].click();", btnCerrarDetalleProceso);
        await driver.sleep(2000); // Esperar a que el modal desaparezca

        console.log("‚úÖ Paso X: Modal de Detalle del proceso cerrado correctamente.");
      } catch (error) {
        throw new Error(`‚ùå Paso X: (cerrar modal Detalle del proceso): ${error.message}`);
      }

      // === Paso 30: Seleccionar bot√≥n Opciones ===
      try {
        const btnOpciones = await driver.wait(
          until.elementLocated(By.xpath('//*[@id="btn-options"]')),
          10000
        );

        await driver.wait(until.elementIsVisible(btnOpciones), 5000);
        await driver.executeScript("arguments[0].scrollIntoView({block: 'center'});", btnOpciones);
        await driver.sleep(300);

        await driver.executeScript("arguments[0].click();", btnOpciones);
        await driver.sleep(1000);

        console.log("‚úÖ Paso 8: Bot√≥n Opciones seleccionado correctamente.");
      } catch (error) {
        throw new Error(`‚ùå Paso 8: (clic en bot√≥n Opciones): ${error.message}`);
      }

      // === Paso 31: Seleccionar opci√≥n "Suspensi√≥n" ===
      try {
        const ulOpcionesXpath = '//*[@id="container-general-crud"]/div[4]/div[2]/div[1]/div/div/div/ul';
        const opcionSuspensionXpath = '//*[@id="1083"]';


        // Esperar a que se despliegue el men√∫ UL de opciones
        const menuOpciones = await driver.wait(
          until.elementLocated(By.xpath(ulOpcionesXpath)),
          10000
        );
        await driver.wait(until.elementIsVisible(menuOpciones), 5000);

        // Buscar el LI con id=1083 dentro del men√∫
        const opcionSuspension = await driver.wait(
          until.elementLocated(By.xpath(opcionSuspensionXpath)),
          10000
        );

        await driver.executeScript("arguments[0].scrollIntoView({block: 'center'});", opcionSuspension);
        await driver.sleep(300);

        await driver.executeScript("arguments[0].click();", opcionSuspension);
        await driver.sleep(3000); // espera que cargue el modal

        console.log("‚úÖ Paso X: Opci√≥n 'Suspensi√≥n' seleccionada correctamente.");
      } catch (error) {
        throw new Error(`‚ùå Paso X: (clic en opci√≥n Suspensi√≥n): ${error.message}`);
      }

      // === Paso 32: Seleccionar "SUSPENSION POR NO PAGO" en Motivo de Suspensi√≥n ===
      try {
        const selectXpath = '//*[@id="input-select-suspension-type-select"]';

        // Localizamos el <select> real (aunque est√© oculto)
        const selectElement = await driver.wait(
          until.elementLocated(By.xpath(selectXpath)),
          10000
        );

        // Usamos JavaScript para asignar directamente el valor de la opci√≥n
        await driver.executeScript(`
    const select = arguments[0];
    select.value = select.options[1].value; // Opci√≥n index 1 = "SUSPENSION POR NO PAGO"
    select.dispatchEvent(new Event('change', { bubbles: true }));
  `, selectElement);

        console.log("‚úÖ Motivo de suspensi√≥n seleccionado: 'SUSPENSION POR NO PAGO'");
        await driver.sleep(2000);
      } catch (error) {
        throw new Error(`‚ùå Paso X: No se pudo seleccionar motivo de suspensi√≥n: ${error.message}`);
      }

      // === Paso 33: Diligenciar comentario ===
      try {
        const comentarioXpath = '//*[@id="textfield-input-data-comment"]';

        // Localizar input de comentario
        const inputComentario = await driver.wait(
          until.elementLocated(By.xpath(comentarioXpath)),
          10000
        );

        await driver.wait(until.elementIsVisible(inputComentario), 5000);

        // Limpiar por si hay texto previo y escribir
        await inputComentario.clear();
        await inputComentario.sendKeys("test automatizacion");

        console.log("‚úÖ Comentario diligenciado correctamente: 'test automatizacion'");
        await driver.sleep(1000);
      } catch (error) {
        throw new Error(`‚ùå Paso X: No se pudo diligenciar el comentario: ${error.message}`);
      }

      // === Paso 34: Cancelar suspensi√≥n correctamente dentro del modal ===
      try {
        const modalXpath = '//*[@id="widget-dialog-open-dialog-new-5522-CustomerManager"]/div/div';
        const btnCancelarXpath = './/*[@id="widget-button-cancel-confirm-selected"]/div';
        const progressXpath = '//*[@class="progress-bar"]';

        // 1. Esperar modal visible
        const modal = await driver.wait(
          until.elementLocated(By.xpath(modalXpath)),
          10000
        );
        await driver.wait(until.elementIsVisible(modal), 5000);

        // 2. Buscar bot√≥n "Cancelar" dentro del modal
        const btnCancelar = await modal.findElement(By.xpath(btnCancelarXpath));
        await driver.wait(until.elementIsVisible(btnCancelar), 5000);

        // 3. Forzar clic con JS
        await driver.executeScript("arguments[0].scrollIntoView({block: 'center'});", btnCancelar);
        await driver.sleep(300);
        await driver.executeScript("arguments[0].click();", btnCancelar);
        console.log("‚úÖ Bot√≥n 'Cancelar' presionado dentro del modal.");

        // 4. Esperar si aparece un progress
        try {
          const progress = await driver.wait(
            until.elementLocated(By.xpath(progressXpath)),
            5000
          );
          await driver.wait(until.stalenessOf(progress), 20000); // esperar que desaparezca
          console.log("‚è≥ Progress detectado y completado.");
        } catch {
          console.log("‚ö†Ô∏è No apareci√≥ progress despu√©s de cancelar.");
        }

        // 5. Esperar a que modal se oculte (no necesariamente desaparece del DOM)
        await driver.wait(until.elementIsNotVisible(modal), 20000);
        console.log("‚úÖ Paso X: Cancelar suspensi√≥n ejecutado correctamente, modal oculto.");
      } catch (error) {
        throw new Error(`‚ùå Paso X: No se pudo cancelar la suspensi√≥n correctamente: ${error.message}`);
      }


      // === Paso 35: Seleccionar bot√≥n Opciones ===
      try {
        const btnOpciones = await driver.wait(
          until.elementLocated(By.xpath('//*[@id="btn-options"]')),
          10000
        );

        await driver.wait(until.elementIsVisible(btnOpciones), 5000);
        await driver.executeScript("arguments[0].scrollIntoView({block: 'center'});", btnOpciones);
        await driver.sleep(300);

        await driver.executeScript("arguments[0].click();", btnOpciones);
        await driver.sleep(1000);

        console.log("‚úÖ Paso 8: Bot√≥n Opciones seleccionado correctamente.");
      } catch (error) {
        throw new Error(`‚ùå Paso 8: (clic en bot√≥n Opciones): ${error.message}`);
      }

      // === Paso 36: Seleccionar opci√≥n "Reconexi√≥n" ===
      try {
        // 1. Esperar que el men√∫ UL de opciones est√© visible
        const menuOpciones = await driver.wait(
          until.elementLocated(By.xpath('//*[@id="container-general-crud"]/div[4]/div[2]/div[1]/div/div/div/ul')),
          10000
        );
        await driver.wait(until.elementIsVisible(menuOpciones), 5000);

        // 2. Buscar el LI con id=1081 (Reconexi√≥n)
        const opcionReconexion = await driver.wait(
          until.elementLocated(By.xpath('//*[@id="1081"]')),
          10000
        );

        // 3. Asegurar visibilidad y hacer clic
        await driver.executeScript("arguments[0].scrollIntoView({block: 'center'});", opcionReconexion);
        await driver.sleep(300);
        await driver.executeScript("arguments[0].click();", opcionReconexion);
        await driver.sleep(3000); // esperar carga del modal

        console.log("‚úÖ Paso X: Opci√≥n 'Reconexi√≥n' seleccionada correctamente.");
      } catch (error) {
        throw new Error(`‚ùå Paso X: Error al seleccionar la opci√≥n 'Reconexi√≥n': ${error.message}`);
      }

      // === Paso 37: Diligenciar comentario en Reconexi√≥n ===
      try {
        const comentarioXpath = '//*[@id="textfield-input-data-comment"]';

        // 1. Esperar a que el campo comentario est√© disponible
        const inputComentario = await driver.wait(
          until.elementLocated(By.xpath(comentarioXpath)),
          10000
        );
        await driver.wait(until.elementIsVisible(inputComentario), 5000);

        // 2. Limpiar por si hay texto previo
        await inputComentario.clear();

        // 3. Escribir el comentario
        await inputComentario.sendKeys("test automatizacion");
        console.log("‚úÖ Paso X: Comentario 'test automatizacion' diligenciado correctamente en Reconexi√≥n.");

        await driver.sleep(2000); // peque√±a espera para asegurar persistencia

      } catch (error) {
        throw new Error(`‚ùå Paso X: No se pudo diligenciar el comentario en Reconexi√≥n: ${error.message}`);
      }

      // === Paso 38: Cancelar Reconexi√≥n ===
      try {
        const modalXpath = '//*[@id="widget-dialog-open-dialog-new-5522-CustomerManager"]/div/div';
        const btnCancelarXpath = './/*[@id="widget-button-cancel-confirm-selected"]/div';
        const progressXpath = '//*[@class="progress-bar"]';

        // 1. Esperar a que el modal est√© presente
        const modal = await driver.wait(
          until.elementLocated(By.xpath(modalXpath)),
          10000
        );
        await driver.wait(until.elementIsVisible(modal), 5000);

        // 2. Buscar el bot√≥n "Cancelar" dentro del modal
        const btnCancelar = await modal.findElement(By.xpath(btnCancelarXpath));
        await driver.wait(until.elementIsVisible(btnCancelar), 5000);

        // 3. Forzar scroll y clic en "Cancelar"
        await driver.executeScript("arguments[0].scrollIntoView({block: 'center'});", btnCancelar);
        await driver.sleep(300);
        await driver.executeScript("arguments[0].click();", btnCancelar);
        console.log("‚úÖ Paso X: Bot√≥n 'Cancelar' presionado en modal de Reconexi√≥n.");

        // 4. Verificar si aparece un progress
        try {
          const progress = await driver.wait(
            until.elementLocated(By.xpath(progressXpath)),
            5000
          );
          await driver.wait(until.stalenessOf(progress), 20000);
          console.log("‚è≥ Progress de Reconexi√≥n detectado y finalizado.");
        } catch {
          console.log("‚ÑπÔ∏è No apareci√≥ progress despu√©s de cancelar Reconexi√≥n.");
        }

        // 5. Validar que el modal se oculte
        await driver.wait(until.elementIsNotVisible(modal), 20000);
        console.log("‚úÖ Paso X: Modal de Reconexi√≥n cerrado correctamente.");
      } catch (error) {
        throw new Error(`‚ùå Paso X: No se pudo cancelar la Reconexi√≥n: ${error.message}`);
      }


      // === Paso 39: Seleccionar opci√≥n "Cambio de plan" ===
      try {
        const btnOpcionesXpath = '//*[@id="btn-options"]';
        const menuOpcionesXpath = '//*[@id="container-general-crud"]/div[4]/div[2]/div[1]/div/div/div/ul';
        const opcionCambioPlanXpath = '//*[@id="1082"]';

        // 1. Clic en bot√≥n Opciones
        const btnOpciones = await driver.wait(
          until.elementLocated(By.xpath(btnOpcionesXpath)),
          10000
        );
        await driver.wait(until.elementIsVisible(btnOpciones), 5000);
        await driver.executeScript("arguments[0].click();", btnOpciones);
        console.log("‚úÖ Bot√≥n 'Opciones' presionado correctamente.");

        // 2. Esperar men√∫ desplegado
        const menuOpciones = await driver.wait(
          until.elementLocated(By.xpath(menuOpcionesXpath)),
          10000
        );
        await driver.wait(until.elementIsVisible(menuOpciones), 5000);

        // 3. Seleccionar "Cambio de plan"
        const opcionCambioPlan = await driver.wait(
          until.elementLocated(By.xpath(opcionCambioPlanXpath)),
          10000
        );
        await driver.executeScript("arguments[0].scrollIntoView({block: 'center'});", opcionCambioPlan);
        await driver.sleep(300);
        await driver.executeScript("arguments[0].click();", opcionCambioPlan);
        await driver.sleep(3000);

        console.log("‚úÖ Paso X: Opci√≥n 'Cambio de plan' seleccionada correctamente.");
      } catch (error) {
        throw new Error(`‚ùå Paso X: Error al seleccionar la opci√≥n 'Cambio de plan': ${error.message}`);
      }


      // === Paso 40: Seleccionar bot√≥n "Nuevo plan comercial" en modal de Cambio de plan ===
      try {
        const btnNuevoPlanXpath = '//*[@id="widget-pickview-pick-data-change-plan"]/div[1]/span[2]/button';

        // 1. Esperar a que el bot√≥n est√© presente
        const btnNuevoPlan = await driver.wait(
          until.elementLocated(By.xpath(btnNuevoPlanXpath)),
          10000
        );
        await driver.wait(until.elementIsVisible(btnNuevoPlan), 5000);

        // 2. Scroll y clic en el bot√≥n
        await driver.executeScript("arguments[0].scrollIntoView({block: 'center'});", btnNuevoPlan);
        await driver.sleep(300);
        await driver.executeScript("arguments[0].click();", btnNuevoPlan);
        console.log("‚úÖ Paso X: Bot√≥n 'Nuevo plan comercial' presionado correctamente.");

        await driver.sleep(2000); // peque√±a espera para carga de datos

      } catch (error) {
        throw new Error(`‚ùå Paso X: No se pudo presionar el bot√≥n 'Nuevo plan comercial': ${error.message}`);
      }


      // === Paso 41: Seleccionar el plan "PLAN 800 MEGAS 2025 V" ===
      try {
        const tbodyXpath = '//*[@id="widget-dialog-pickview-pick-data-change-plan"]/div/div/div[2]/div/div[1]/div[2]/div[1]/div[2]/div[2]/div[2]/table/tbody';

        // 1. Esperar el tbody
        const tbodyPlanes = await driver.wait(
          until.elementLocated(By.xpath(tbodyXpath)),
          15000
        );
        await driver.wait(until.elementIsVisible(tbodyPlanes), 5000);

        // 2. Buscar todas las filas dentro del tbody
        const filas = await tbodyPlanes.findElements(By.xpath("./tr"));
        if (filas.length === 0) {
          throw new Error("‚ùå No se encontraron planes comerciales en la tabla.");
        }

        let planEncontrado = false;
        for (const fila of filas) {
          const textoFila = (await fila.getText()).trim();
          console.log(`üìå Fila encontrada: ${textoFila}`);

          // 3. Verificar si la fila corresponde al plan deseado
          if (textoFila.includes("PLAN 800 MEGAS 2025 V")) {
            const btnMas = await fila.findElement(By.xpath("./td[4]/div/button"));
            await driver.executeScript("arguments[0].scrollIntoView({block: 'center'});", btnMas);
            await driver.sleep(300);
            await driver.executeScript("arguments[0].click();", btnMas);
            await driver.sleep(3000); // peque√±a espera para carga de datos

            console.log("‚úÖ Plan 'PLAN 800 MEGAS 2025 V' agregado correctamente.");
            planEncontrado = true;
            break;
          }
        }

        if (!planEncontrado) {
          throw new Error("‚ùå No se encontr√≥ el plan 'PLAN 800 MEGAS 2025 V' en la tabla.");
        }

      } catch (error) {
        throw new Error(`‚ùå Paso X: No se pudo agregar el plan 'PLAN 800 MEGAS 2025 V': ${error.message}`);
      }

      // === Paso 42: Confirmar selecci√≥n del plan (bot√≥n "Seleccionar") ===
      try {
        const btnSeleccionarXpath = '//*[@id="widget-button-select-pick-data-change-plan"]/div';

        // Esperar que el bot√≥n est√© presente y visible
        const btnSeleccionar = await driver.wait(
          until.elementLocated(By.xpath(btnSeleccionarXpath)),
          15000
        );
        await driver.wait(until.elementIsVisible(btnSeleccionar), 5000);
        await driver.wait(until.elementIsEnabled(btnSeleccionar), 5000);

        // Clic en el bot√≥n Seleccionar
        await driver.executeScript("arguments[0].scrollIntoView({block: 'center'});", btnSeleccionar);
        await driver.sleep(300);
        await driver.executeScript("arguments[0].click();", btnSeleccionar);

        console.log("‚úÖ Bot√≥n 'Seleccionar' presionado correctamente.");

        // Espera breve para que se procese la acci√≥n
        await driver.sleep(3000);

      } catch (error) {
        throw new Error(`‚ùå Paso X: No se pudo presionar el bot√≥n 'Seleccionar': ${error.message}`);
      }

      // === Paso 43: Diligenciar n√∫mero PQ con un n√∫mero aleatorio de 10 d√≠gitos ===
      try {
        const inputNumeroPqXpath = '//*[@id="textfield-input-data-number-pq"]';

        // Esperar a que el input est√© presente y visible
        const inputNumeroPq = await driver.wait(
          until.elementLocated(By.xpath(inputNumeroPqXpath)),
          15000
        );
        await driver.wait(until.elementIsVisible(inputNumeroPq), 5000);

        // Generar n√∫mero aleatorio de 10 d√≠gitos
        const numeroAleatorio = Math.floor(Math.random() * 9000000000) + 1000000000; // siempre 10 d√≠gitos

        // Diligenciar n√∫mero en el campo
        await inputNumeroPq.clear();
        await inputNumeroPq.sendKeys(numeroAleatorio.toString());

        console.log(`‚úÖ N√∫mero PQ diligenciado correctamente: ${numeroAleatorio}`);

        await driver.sleep(2000);

      } catch (error) {
        throw new Error(`‚ùå Paso X: No se pudo diligenciar el n√∫mero PQ: ${error.message}`);
      }

      // === Paso 44: Diligenciar comentario ===
      try {
        const inputComentarioXpath = '//*[@id="textfield-input-data-comment"]';

        // Esperar a que el input est√© presente y visible
        const inputComentario = await driver.wait(
          until.elementLocated(By.xpath(inputComentarioXpath)),
          15000
        );
        await driver.wait(until.elementIsVisible(inputComentario), 5000);

        // Limpiar y escribir el comentario
        await inputComentario.clear();
        await inputComentario.sendKeys("test automatizacion");

        console.log("‚úÖ Comentario diligenciado correctamente: 'test automatizacion'");

        await driver.sleep(2000);

      } catch (error) {
        throw new Error(`‚ùå Paso X: No se pudo diligenciar el comentario: ${error.message}`);
      }

      // === Paso 45: Cancelar cambio de plan  ===
      try {
        // Localizar din√°micamente el modal de CustomerManager
        const modalXpath = '//div[starts-with(@id,"widget-dialog-open-dialog") and contains(@id,"CustomerManager")]';
        const modal = await driver.wait(
          until.elementLocated(By.xpath(modalXpath)),
          15000
        );

        // Buscar el bot√≥n Cancelar dentro del modal
        const btnCancelarXpath = './/*[@id="widget-button-cancel-confirm-selected"]/div';
        const btnCancelar = await modal.findElement(By.xpath(btnCancelarXpath));

        await driver.wait(until.elementIsVisible(btnCancelar), 10000);
        await driver.executeScript("arguments[0].scrollIntoView({block: 'center'});", btnCancelar);
        await driver.sleep(300);

        // Dar clic en Cancelar
        await driver.executeScript("arguments[0].click();", btnCancelar);
        console.log("‚úÖ Bot√≥n 'Cancelar' en cambio de plan presionado correctamente.");

        // Esperar que el modal desaparezca
        await driver.wait(until.stalenessOf(modal), 20000);
        console.log("‚úÖ Modal de cambio de plan cerrado correctamente.");

      } catch (error) {
        throw new Error(`‚ùå Paso X: No se pudo cancelar el cambio de plan: ${error.message}`);
      }


    } catch (error) {
      console.error("‚ùå Error en gesti√≥n de clientes y servicios domiciliarios:", error.message);
      const screenshot = await driver.takeScreenshot();
      const carpetaErrores = path.resolve(__dirname, '../errores');
      if (!fs.existsSync(carpetaErrores)) fs.mkdirSync(carpetaErrores);
      const filePath = path.join(carpetaErrores, `error_gestionClientes_${Date.now()}.png`);
      fs.writeFileSync(filePath, screenshot, 'base64');
      throw error;
    }
  }
}
